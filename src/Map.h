#pragma once
#define MAP_H

#include "stdafx.h"
#include "Player.h"
#include <vector>

class Player;
class Map;

using namespace std;

//link between two regions, aka edge
struct mapLink
{
	//the linked regions
	size_t region1, region2;

	//constructor
	mapLink(size_t r1, size_t r2) : region1(r1), region2(r2) {}
};

//region, aka vertex
struct region
{
	const int HILL = 1;
	const int MOUNTAIN = 2;
	const int FARMLAND = 3;
	const int FOREST = 4;
	const int SWAMP = 5;
	const int LAKE = 6;


	//name of the region
	std::string name;
	//region type
	int type;

	//owner of the region
	Player *owner = nullptr;
	//number of tokens
	int tokens;

	//default constructor
	region() : owner(nullptr) {};

	//parameters that are generated by the map
	bool mountain;

	bool coastal;
	
	bool magic;

	bool cavern;


	//parameters that are generated in game
	bool hole = false;

	bool lair = false;

	bool encampment = false;

	bool fortress = false;

	bool decline = false;

	//contructor
	region(string n) : name(n), mountain(false), tokens(0), owner(nullptr) {}
	region(string n, bool m, bool l) : name(n), mountain(m), owner(nullptr)
	{
		if (l) {
			tokens = 1;
			decline = true;
		}
		else
			tokens = 0;
	}
	region(string n, int ty, bool tri, bool co, bool ma, bool ca) : name(n), type(ty), coastal(co), magic(ma), cavern(ca) {
		if (tri) {
			tokens = 1;
			decline = true;
		}
		else
			tokens = 0;

		if (ty == MOUNTAIN)
			mountain = true;
		
	}

	//std::string describe() {
	//
	//}
};

class Map {
private:
	//used to see if map is a connected graph
	void recursiveDepthFirstTraversal(std::vector<size_t> &, std::vector<bool> &, size_t);
public:


	//vector of all the regions
	std::vector<region> regions;
	//vector of all the links
	std::vector<mapLink> links;

	//constructor
	Map(const size_t, const size_t);

	//simply adds a new region of the chosen name
	void addRegion(string);


	//simply adds a new region of the chosen name
	void addRegion(string, char type);

	void addRegion(string, char type, bool tribal, bool coastal, bool magic, bool cavern);

	//adds a new link between 2 regions
	void addLink(const size_t, const size_t);

	//Returns vector with results of recursiveDepthFirstTraversal
	std::vector<size_t> dft(const size_t);

	// Checks if all regions are linked
	bool linked();

	bool empty();

	void decline(Player*);
};